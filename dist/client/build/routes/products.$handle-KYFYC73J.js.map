{
  "version": 3,
  "sources": ["../../../../app/routes/products.$handle.jsx"],
  "sourcesContent": ["import {Suspense} from 'react';\nimport {defer, redirect} from '@shopify/remix-oxygen';\nimport {Await, Link, useLoaderData} from '@remix-run/react';\n\nimport {\n  Image,\n  Money,\n  VariantSelector,\n  getSelectedProductOptions,\n  CartForm,\n} from '@shopify/hydrogen';\nimport {getVariantUrl} from '~/utils';\n\nexport const meta = ({data}) => {\n  return [{title: `Hydrogen | ${data.product.title}`}];\n};\n\nexport async function loader({params, request, context}) {\n  const {handle} = params;\n  const {storefront} = context;\n\n  const selectedOptions = getSelectedProductOptions(request).filter(\n    (option) =>\n      // Filter out Shopify predictive search query params\n      !option.name.startsWith('_sid') &&\n      !option.name.startsWith('_pos') &&\n      !option.name.startsWith('_psq') &&\n      !option.name.startsWith('_ss') &&\n      !option.name.startsWith('_v'),\n  );\n\n  if (!handle) {\n    throw new Error('Expected product handle to be defined');\n  }\n\n  // await the query for the critical product data\n  const {product} = await storefront.query(PRODUCT_QUERY, {\n    variables: {handle, selectedOptions},\n  });\n\n  // In order to show which variants are available in the UI, we need to query\n  // all of them. But there might be a *lot*, so instead separate the variants\n  // into it's own separate query that is deferred. So there's a brief moment\n  // where variant options might show as available when they're not, but after\n  // this deffered query resolves, the UI will update.\n  const variants = storefront.query(VARIANTS_QUERY, {\n    variables: {handle},\n  });\n\n  if (!product?.id) {\n    throw new Response(null, {status: 404});\n  }\n\n  const firstVariant = product.variants.nodes[0];\n  const firstVariantIsDefault = Boolean(\n    firstVariant.selectedOptions.find(\n      (option) => option.name === 'Title' && option.value === 'Default Title',\n    ),\n  );\n\n  if (firstVariantIsDefault) {\n    product.selectedVariant = firstVariant;\n  } else {\n    // if no selected variant was returned from the selected options,\n    // we redirect to the first variant's url with it's selected options applied\n    if (!product.selectedVariant) {\n      return redirectToFirstVariant({product, request});\n    }\n  }\n  return defer({product, variants});\n}\n\nfunction redirectToFirstVariant({product, request}) {\n  const url = new URL(request.url);\n  const firstVariant = product.variants.nodes[0];\n\n  throw redirect(\n    getVariantUrl({\n      pathname: url.pathname,\n      handle: product.handle,\n      selectedOptions: firstVariant.selectedOptions,\n      searchParams: new URLSearchParams(url.search),\n    }),\n    {\n      status: 302,\n    },\n  );\n}\n\nexport default function Product() {\n  const {product, variants} = useLoaderData();\n  const {selectedVariant} = product;\n  return (\n    <div className=\"product\">\n      <ProductImage image={selectedVariant?.image} />\n      <ProductMain\n        selectedVariant={selectedVariant}\n        product={product}\n        variants={variants}\n      />\n    </div>\n  );\n}\n\nfunction ProductImage({image}) {\n  if (!image) {\n    return <div className=\"product-image\" />;\n  }\n  return (\n    <div className=\"product-image\">\n      <Image\n        alt={image.altText || 'Product Image'}\n        aspectRatio=\"1/1\"\n        data={image}\n        key={image.id}\n        sizes=\"(min-width: 45em) 50vw, 100vw\"\n      />\n    </div>\n  );\n}\n\nfunction ProductMain({selectedVariant, product, variants}) {\n  const {title, descriptionHtml} = product;\n  return (\n    <div className=\"product-main\">\n      <h1>{title}</h1>\n      <ProductPrice selectedVariant={selectedVariant} />\n      <br />\n      <Suspense\n        fallback={\n          <ProductForm\n            product={product}\n            selectedVariant={selectedVariant}\n            variants={[]}\n          />\n        }\n      >\n        <Await\n          errorElement=\"There was a problem loading product variants\"\n          resolve={variants}\n        >\n          {(data) => (\n            <ProductForm\n              product={product}\n              selectedVariant={selectedVariant}\n              variants={data.product?.variants.nodes || []}\n            />\n          )}\n        </Await>\n      </Suspense>\n      <br />\n      <br />\n      <p>\n        <strong>Description</strong>\n      </p>\n      <br />\n      <div dangerouslySetInnerHTML={{__html: descriptionHtml}} />\n      <br />\n    </div>\n  );\n}\n\nfunction ProductPrice({selectedVariant}) {\n  return (\n    <div className=\"product-price\">\n      {selectedVariant?.compareAtPrice ? (\n        <>\n          <p>Sale</p>\n          <br />\n          <div className=\"product-price-on-sale\">\n            {selectedVariant ? <Money data={selectedVariant.price} /> : null}\n            <s>\n              <Money data={selectedVariant.compareAtPrice} />\n            </s>\n          </div>\n        </>\n      ) : (\n        selectedVariant?.price && <Money data={selectedVariant?.price} />\n      )}\n    </div>\n  );\n}\n\nfunction ProductForm({product, selectedVariant, variants}) {\n  return (\n    <div className=\"product-form\">\n      <VariantSelector\n        handle={product.handle}\n        options={product.options}\n        variants={variants}\n      >\n        {({option}) => <ProductOptions key={option.name} option={option} />}\n      </VariantSelector>\n      <br />\n      <AddToCartButton\n        disabled={!selectedVariant || !selectedVariant.availableForSale}\n        onClick={() => {\n          window.location.href = window.location.href + '#cart-aside';\n        }}\n        lines={\n          selectedVariant\n            ? [\n                {\n                  merchandiseId: selectedVariant.id,\n                  quantity: 1,\n                },\n              ]\n            : []\n        }\n      >\n        {selectedVariant?.availableForSale ? 'Add to cart' : 'Sold out'}\n      </AddToCartButton>\n    </div>\n  );\n}\n\nfunction ProductOptions({option}) {\n  return (\n    <div className=\"product-options\" key={option.name}>\n      <h5>{option.name}</h5>\n      <div className=\"product-options-grid\">\n        {option.values.map(({value, isAvailable, isActive, to}) => {\n          return (\n            <Link\n              className=\"product-options-item\"\n              key={option.name + value}\n              prefetch=\"intent\"\n              preventScrollReset\n              replace\n              to={to}\n              style={{\n                border: isActive ? '1px solid black' : '1px solid transparent',\n                opacity: isAvailable ? 1 : 0.3,\n              }}\n            >\n              {value}\n            </Link>\n          );\n        })}\n      </div>\n      <br />\n    </div>\n  );\n}\n\nfunction AddToCartButton({analytics, children, disabled, lines, onClick}) {\n  return (\n    <CartForm route=\"/cart\" inputs={{lines}} action={CartForm.ACTIONS.LinesAdd}>\n      {(fetcher) => (\n        <>\n          <input\n            name=\"analytics\"\n            type=\"hidden\"\n            value={JSON.stringify(analytics)}\n          />\n          <button\n            type=\"submit\"\n            onClick={onClick}\n            disabled={disabled ?? fetcher.state !== 'idle'}\n          >\n            {children}\n          </button>\n        </>\n      )}\n    </CartForm>\n  );\n}\n\nconst PRODUCT_VARIANT_FRAGMENT = `#graphql\n  fragment ProductVariant on ProductVariant {\n    availableForSale\n    compareAtPrice {\n      amount\n      currencyCode\n    }\n    id\n    image {\n      __typename\n      id\n      url\n      altText\n      width\n      height\n    }\n    price {\n      amount\n      currencyCode\n    }\n    product {\n      title\n      handle\n    }\n    quantityAvailable\n    selectedOptions {\n      name\n      value\n    }\n    sku\n    title\n    unitPrice {\n      amount\n      currencyCode\n    }\n  }\n`;\n\nconst PRODUCT_FRAGMENT = `#graphql\n  fragment Product on Product {\n    id\n    title\n    vendor\n    handle\n    descriptionHtml\n    description\n    options {\n      name\n      values\n    }\n    selectedVariant: variantBySelectedOptions(selectedOptions: $selectedOptions) {\n      ...ProductVariant\n    }\n    variants(first: 1) {\n      nodes {\n        ...ProductVariant\n      }\n    }\n    seo {\n      description\n      title\n    }\n  }\n  ${PRODUCT_VARIANT_FRAGMENT}\n`;\n\nconst PRODUCT_QUERY = `#graphql\n  query Product(\n    $country: CountryCode\n    $handle: String!\n    $language: LanguageCode\n    $selectedOptions: [SelectedOptionInput!]!\n  ) @inContext(country: $country, language: $language) {\n    product(handle: $handle) {\n      ...Product\n    }\n  }\n  ${PRODUCT_FRAGMENT}\n`;\n\nconst PRODUCT_VARIANTS_FRAGMENT = `#graphql\n  fragment ProductVariants on Product {\n    variants(first: 250) {\n      nodes {\n        ...ProductVariant\n      }\n    }\n  }\n  ${PRODUCT_VARIANT_FRAGMENT}\n`;\n\nconst VARIANTS_QUERY = `#graphql\n  ${PRODUCT_VARIANTS_FRAGMENT}\n  query ProductVariants(\n    $country: CountryCode\n    $language: LanguageCode\n    $handle: String!\n  ) @inContext(country: $country, language: $language) {\n    product(handle: $handle) {\n      ...ProductVariants\n    }\n  }\n`;\n"],
  "mappings": "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",
  "names": []
}
